{"ast":null,"code":"import { useSelector } from \"react-redux\";\nimport { fetchData } from \"../asyncActions/fetchQuestions\";\n\nconst {\n  createSlice\n} = require(\"@reduxjs/toolkit\");\n\nexport const rootSlice = createSlice({\n  name: \"rootReducer\",\n  initialState: {\n    data: [],\n    question: \"\",\n    answer: \"\",\n    possibleAnswers: \"\",\n    dataIsFetched: false\n  },\n  reducers: {},\n  extraReducers: {\n    [fetchData.fulfilled]: (state, action) => {\n      state.dataIsFetched = true;\n\n      if (state.dataIsFetched) {\n        state.data = action.payload;\n        const maxLength = action.payload.questionsFind.length;\n        let random = Math.floor(Math.random() * maxLength);\n        console.log(random); // console.log(action.payload.questionsFind, \" <\");\n        // console.log(\"fullfiled happen\");\n      }\n    }\n  }\n});\nexport const {} = rootSlice.actions;\nexport const selectQuestions = state => state.rootReducer.data;\nexport default rootSlice.reducer;","map":{"version":3,"sources":["/home/guilhermesnd/Área de Trabalho/shit_talkers/src/slices/rootSlice.js"],"names":["useSelector","fetchData","createSlice","require","rootSlice","name","initialState","data","question","answer","possibleAnswers","dataIsFetched","reducers","extraReducers","fulfilled","state","action","payload","maxLength","questionsFind","length","random","Math","floor","console","log","actions","selectQuestions","rootReducer","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,aAA5B;AACA,SAASC,SAAT,QAA0B,gCAA1B;;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAkBC,OAAO,CAAC,kBAAD,CAA/B;;AAEA,OAAO,MAAMC,SAAS,GAAGF,WAAW,CAAC;AACnCG,EAAAA,IAAI,EAAE,aAD6B;AAEnCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,IAAI,EAAE,EADM;AAEZC,IAAAA,QAAQ,EAAE,EAFE;AAGZC,IAAAA,MAAM,EAAE,EAHI;AAIZC,IAAAA,eAAe,EAAE,EAJL;AAKZC,IAAAA,aAAa,EAAE;AALH,GAFqB;AASnCC,EAAAA,QAAQ,EAAE,EATyB;AAUnCC,EAAAA,aAAa,EAAE;AACb,KAACZ,SAAS,CAACa,SAAX,GAAuB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACxCD,MAAAA,KAAK,CAACJ,aAAN,GAAsB,IAAtB;;AACA,UAAII,KAAK,CAACJ,aAAV,EAAyB;AACvBI,QAAAA,KAAK,CAACR,IAAN,GAAaS,MAAM,CAACC,OAApB;AACA,cAAMC,SAAS,GAAGF,MAAM,CAACC,OAAP,CAAeE,aAAf,CAA6BC,MAA/C;AACA,YAAIC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACD,MAAL,KAAgBH,SAA3B,CAAb;AACAM,QAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ,EAJuB,CAKvB;AAEA;AACD;AACF;AAZY;AAVoB,CAAD,CAA7B;AA0BP,OAAO,MAAM,KAAKjB,SAAS,CAACsB,OAArB;AAEP,OAAO,MAAMC,eAAe,GAAIZ,KAAD,IAAWA,KAAK,CAACa,WAAN,CAAkBrB,IAArD;AACP,eAAeH,SAAS,CAACyB,OAAzB","sourcesContent":["import { useSelector } from \"react-redux\";\nimport { fetchData } from \"../asyncActions/fetchQuestions\";\n\nconst { createSlice } = require(\"@reduxjs/toolkit\");\n\nexport const rootSlice = createSlice({\n  name: \"rootReducer\",\n  initialState: {\n    data: [],\n    question: \"\",\n    answer: \"\",\n    possibleAnswers: \"\",\n    dataIsFetched: false,\n  },\n  reducers: {},\n  extraReducers: {\n    [fetchData.fulfilled]: (state, action) => {\n      state.dataIsFetched = true;\n      if (state.dataIsFetched) {\n        state.data = action.payload;\n        const maxLength = action.payload.questionsFind.length;\n        let random = Math.floor(Math.random() * maxLength);\n        console.log(random);\n        // console.log(action.payload.questionsFind, \" <\");\n\n        // console.log(\"fullfiled happen\");\n      }\n    },\n  },\n});\n\nexport const {} = rootSlice.actions;\n\nexport const selectQuestions = (state) => state.rootReducer.data;\nexport default rootSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}