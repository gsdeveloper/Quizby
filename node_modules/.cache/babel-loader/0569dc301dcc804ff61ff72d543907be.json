{"ast":null,"code":"import { useSelector } from \"react-redux\";\nimport { fetchData } from \"../asyncActions/fetchQuestions\";\n\nconst {\n  createSlice\n} = require(\"@reduxjs/toolkit\");\n\nexport const rootSlice = createSlice({\n  name: \"rootReducer\",\n  initialState: {\n    data: [],\n    question: \"\",\n    answer: \"\",\n    possibleAnswers: \"\",\n    dataIsFetched: false\n  },\n  reducers: {},\n  extraReducers: {\n    [fetchData.fulfilled]: (state, action) => {\n      state.data = action.payload;\n      const questionsFind = action.payload.questionsFind;\n      console.log(action.payload.possibleAnswersFind);\n      const maxLength = questionsFind.length;\n      let random = Math.floor(Math.random() * maxLength);\n      console.log(random);\n      state.question = questionsFind[random];\n      state.answer = // console.log(action.payload.questionsFind, \" <\");\n      // console.log(\"fullfiled happen\");\n      state.dataIsFetched = true;\n    }\n  }\n});\nexport const {} = rootSlice.actions;\nexport const selectQuestions = state => state.rootReducer.data;\nexport default rootSlice.reducer;","map":{"version":3,"sources":["/home/guilhermesnd/Área de Trabalho/shit_talkers/src/slices/rootSlice.js"],"names":["useSelector","fetchData","createSlice","require","rootSlice","name","initialState","data","question","answer","possibleAnswers","dataIsFetched","reducers","extraReducers","fulfilled","state","action","payload","questionsFind","console","log","possibleAnswersFind","maxLength","length","random","Math","floor","actions","selectQuestions","rootReducer","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,aAA5B;AACA,SAASC,SAAT,QAA0B,gCAA1B;;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAkBC,OAAO,CAAC,kBAAD,CAA/B;;AAEA,OAAO,MAAMC,SAAS,GAAGF,WAAW,CAAC;AACnCG,EAAAA,IAAI,EAAE,aAD6B;AAEnCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,IAAI,EAAE,EADM;AAEZC,IAAAA,QAAQ,EAAE,EAFE;AAGZC,IAAAA,MAAM,EAAE,EAHI;AAIZC,IAAAA,eAAe,EAAE,EAJL;AAKZC,IAAAA,aAAa,EAAE;AALH,GAFqB;AASnCC,EAAAA,QAAQ,EAAE,EATyB;AAUnCC,EAAAA,aAAa,EAAE;AACb,KAACZ,SAAS,CAACa,SAAX,GAAuB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACxCD,MAAAA,KAAK,CAACR,IAAN,GAAaS,MAAM,CAACC,OAApB;AACA,YAAMC,aAAa,GAAGF,MAAM,CAACC,OAAP,CAAeC,aAArC;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAM,CAACC,OAAP,CAAeI,mBAA3B;AACA,YAAMC,SAAS,GAAGJ,aAAa,CAACK,MAAhC;AACA,UAAIC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACD,MAAL,KAAgBF,SAA3B,CAAb;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAYI,MAAZ;AACAT,MAAAA,KAAK,CAACP,QAAN,GAAiBU,aAAa,CAACM,MAAD,CAA9B;AACAT,MAAAA,KAAK,CAACN,MAAN,GACE;AAEA;AACAM,MAAAA,KAAK,CAACJ,aAAN,GAAsB,IAJxB;AAKD;AAdY;AAVoB,CAAD,CAA7B;AA4BP,OAAO,MAAM,KAAKP,SAAS,CAACuB,OAArB;AAEP,OAAO,MAAMC,eAAe,GAAIb,KAAD,IAAWA,KAAK,CAACc,WAAN,CAAkBtB,IAArD;AACP,eAAeH,SAAS,CAAC0B,OAAzB","sourcesContent":["import { useSelector } from \"react-redux\";\nimport { fetchData } from \"../asyncActions/fetchQuestions\";\n\nconst { createSlice } = require(\"@reduxjs/toolkit\");\n\nexport const rootSlice = createSlice({\n  name: \"rootReducer\",\n  initialState: {\n    data: [],\n    question: \"\",\n    answer: \"\",\n    possibleAnswers: \"\",\n    dataIsFetched: false,\n  },\n  reducers: {},\n  extraReducers: {\n    [fetchData.fulfilled]: (state, action) => {\n      state.data = action.payload;\n      const questionsFind = action.payload.questionsFind;\n      console.log(action.payload.possibleAnswersFind);\n      const maxLength = questionsFind.length;\n      let random = Math.floor(Math.random() * maxLength);\n      console.log(random);\n      state.question = questionsFind[random];\n      state.answer =\n        // console.log(action.payload.questionsFind, \" <\");\n\n        // console.log(\"fullfiled happen\");\n        state.dataIsFetched = true;\n    },\n  },\n});\n\nexport const {} = rootSlice.actions;\n\nexport const selectQuestions = (state) => state.rootReducer.data;\nexport default rootSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}