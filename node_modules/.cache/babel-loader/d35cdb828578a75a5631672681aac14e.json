{"ast":null,"code":"import { useSelector } from \"react-redux\";\nimport { fetchData } from \"../asyncActions/fetchQuestions\";\n\nconst {\n  createSlice\n} = require(\"@reduxjs/toolkit\");\n\nexport const rootSlice = createSlice({\n  name: \"rootReducer\",\n  initialState: {\n    data: [],\n    question: \"\",\n    answer: \"\",\n    userAnswer: null,\n    possibleAnswers: [],\n    dataIsFetched: false\n  },\n  reducers: {\n    setUserAnswer: (state, action) => {\n      state.userAnswer = action.payload.e;\n      console.log(state.possibleAnswers);\n      state.possibleAnswers.filter(x => x == state.userAnswer);\n      console.log(state.possibleAnswers);\n    }\n  },\n  extraReducers: {\n    [fetchData.fulfilled]: (state, action) => {\n      state.data = action.payload;\n      const questionsFind = action.payload.questionsFind;\n      const questionMaxLength = questionsFind.length;\n      let random = Math.floor(Math.random() * questionMaxLength);\n      state.question = questionsFind[random].question;\n      state.answer = questionsFind[random].answer;\n      const possibleAnswersFind = action.payload.possibleAnswersFind[0].possibleAnswers;\n      const arr = [];\n      const possibleAnswersMaxLength = possibleAnswersFind.length;\n\n      while (arr.length < 3) {\n        let n = Math.floor(Math.random() * possibleAnswersMaxLength);\n\n        if (arr.indexOf(n) === -1 && possibleAnswersFind[n] !== state.answer) {\n          arr.push(n);\n        }\n      }\n\n      state.possibleAnswers = [possibleAnswersFind[arr[0]], possibleAnswersFind[arr[1]], possibleAnswersFind[arr[2]], state.answer];\n      state.dataIsFetched = true;\n    }\n  }\n});\nexport const {\n  setUserAnswer\n} = rootSlice.actions;\nexport const selectQuestions = state => state.rootReducer.data;\nexport default rootSlice.reducer;","map":{"version":3,"sources":["/home/guilhermesnd/Área de Trabalho/shit_talkers/src/slices/rootSlice.js"],"names":["useSelector","fetchData","createSlice","require","rootSlice","name","initialState","data","question","answer","userAnswer","possibleAnswers","dataIsFetched","reducers","setUserAnswer","state","action","payload","e","console","log","filter","x","extraReducers","fulfilled","questionsFind","questionMaxLength","length","random","Math","floor","possibleAnswersFind","arr","possibleAnswersMaxLength","n","indexOf","push","actions","selectQuestions","rootReducer","reducer"],"mappings":"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","sourcesContent":["import { useSelector } from \"react-redux\";\nimport { fetchData } from \"../asyncActions/fetchQuestions\";\n\nconst { createSlice } = require(\"@reduxjs/toolkit\");\n\nexport const rootSlice = createSlice({\n  name: \"rootReducer\",\n  initialState: {\n    data: [],\n    question: \"\",\n    answer: \"\",\n    userAnswer: null,\n    possibleAnswers: [],\n    dataIsFetched: false,\n  },\n  reducers: {\n    setUserAnswer: (state, action) => {\n      state.userAnswer = action.payload.e;\n      console.log(state.possibleAnswers);\n      state.possibleAnswers.filter((x) => x == state.userAnswer);\n      console.log(state.possibleAnswers);\n    },\n  },\n  extraReducers: {\n    [fetchData.fulfilled]: (state, action) => {\n      state.data = action.payload;\n      const questionsFind = action.payload.questionsFind;\n      const questionMaxLength = questionsFind.length;\n      let random = Math.floor(Math.random() * questionMaxLength);\n      state.question = questionsFind[random].question;\n      state.answer = questionsFind[random].answer;\n\n      const possibleAnswersFind =\n        action.payload.possibleAnswersFind[0].possibleAnswers;\n      const arr = [];\n      const possibleAnswersMaxLength = possibleAnswersFind.length;\n\n      while (arr.length < 3) {\n        let n = Math.floor(Math.random() * possibleAnswersMaxLength);\n        if (arr.indexOf(n) === -1 && possibleAnswersFind[n] !== state.answer) {\n          arr.push(n);\n        }\n      }\n      state.possibleAnswers = [\n        possibleAnswersFind[arr[0]],\n        possibleAnswersFind[arr[1]],\n        possibleAnswersFind[arr[2]],\n        state.answer,\n      ];\n      state.dataIsFetched = true;\n    },\n  },\n});\n\nexport const { setUserAnswer } = rootSlice.actions;\n\nexport const selectQuestions = (state) => state.rootReducer.data;\nexport default rootSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}